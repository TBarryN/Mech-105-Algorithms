This LU Factorization does essentially linear algebra for you!
The function is designed to do matrix multiplication and make it easy to quantify and use data that will impact more than one thing. 
The one stipulation is that the code will only work on a square matrix (ie. rows = columns)

function [L, U, P] = luFactor(A)
% luFactor(A)
%	LU decomposition with pivotiing
% inputs:
%	A = [10, 2, -1; -3, -6, 2; 1, 1, 5];
n = length(A);
L = zeros(n);
U = zeros(n);
P = eye(n);
for i = 1:n
    if size(L) ~= size(A)
        error ('Matrix is not valid')
        L=NaN;
        U=NaN;
        return
    end
    [~,r] = max(abs(A(i:end,i)));
    r = n-(n-i+1)+r;
    A([i r],:) = A([r i],:);
    P([i r],:) = P([r i],:);
    L([i r],:) = L([r i],:);
        
    L(i:n,i) = A(i:n,i)/A(i,i);
    U(i,1:n) = A(i,1:n);
    A(i+1:n,1:n) = A(i+1:n,1:n) - L(i+1:n,i)*A(i,1:n);
% I doubt I need this, but it helps filter out any possible mistakes I could have made in my matrix manipulation
    if size(L) ~= size(A)
        error ('Matrix is not valid')
        L=NaN;
        U=NaN;
        return
    end
end
% outputs:
%	L = lower triangular matrix
%	U = upper triangular matrix
%   P = the permutation matrix


end
